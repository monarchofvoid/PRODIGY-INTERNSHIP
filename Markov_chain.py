# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11AuiHx8vGkeQwUKZTrh1gpEhn1zEJEDK
"""

import random

# Load text
def load_text(filepath):
    with open(filepath, 'r', encoding='utf-8') as file:
        return file.read()

# Tokenize
def tokenize(text):
    return text.replace('\n', ' ').split()

# Build trigram model: (word1, word2) ‚Üí [word3, word3, ...]
def build_trigram_chain(words):
    trigram_chain = {}
    for i in range(len(words) - 2):
        key = (words[i], words[i + 1])
        next_word = words[i + 2]
        if key not in trigram_chain:
            trigram_chain[key] = []
        trigram_chain[key].append(next_word)
    return trigram_chain

# Generate text
def generate_trigram_text(chain, length=100):
    start = random.choice(list(chain.keys()))
    output = [start[0], start[1]]

    for _ in range(length):
        key = (output[-2], output[-1])
        next_words = chain.get(key)
        if not next_words:
            break
        output.append(random.choice(next_words))
    return ' '.join(output)

def strip_gutenberg_boilerplate(text):
    start = text.find("*** START OF THE PROJECT GUTENBERG EBOOK")
    end = text.find("*** END OF THE PROJECT GUTENBERG EBOOK")
    if start != -1 and end != -1:
        return text[start:end]
    return text



# Main
if __name__ == "__main__":
    file_path = "/content/Crime and Punishment.txt"
    raw = load_text(file_path)
    text = strip_gutenberg_boilerplate(raw)
    words = tokenize(text)
    chain = build_trigram_chain(words)
    generated_text = generate_trigram_text(chain, length=200)

    print("üìù Generated Text:\n")
    print(generated_text)